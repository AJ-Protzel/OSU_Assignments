1. What is the purpose of having an individual handler function for each exception/interrupt?
(i.e., if all exceptions/interrupts were delivered to the same handler, what feature that exists
in the current implementation could not be provided?)

For individual error codes for specific signals and debugging.

2. Did you have to do anything to make the user/softint program behave correctly? The grade
script expects it to produce a general protection fault (trap 13), but softint’s code
says int $14. Why should this produce interrupt vector 13? What happens if the kernel
actually allows softint’s int $14 instruction to invoke the kernel’s page fault handler (which
is interrupt vector 14)?

No, a page fault should not be called by a user. General protection fault interupt triggers if a user tries to access things in the kernel because they are user level.

3. The break point test case will either generate a break point exception or a general
protection fault depending on how you initialized the break point entry in the IDT (i.e., your
call to SETGATE from trap_init). Why? How do you need to set it up in order to get the
breakpoint exception to work as specified above and what incorrect setup would cause it to
trigger a general protection fault?

General protection fault is done in ring 0 while breakpoint is in ring 3.
Set the protection = 0 so user cant run it.

4.  What do you think is the point of these mechanisms, particularly in light of what
the user/softint test program does?

Different levels of error management at different locations and functions, permission on user level and kernel level.